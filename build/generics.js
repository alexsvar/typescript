"use strict";
function toString(data) {
    if (Array.isArray(data)) {
        return data.toString();
    }
    switch (typeof data) {
        case 'string':
            return data;
        case 'number':
        case 'symbol':
        case 'bigint':
        case 'boolean':
        case 'function':
            return data.toString();
        case 'object':
            return JSON.stringify(data);
        default:
            return undefined;
    }
}
console.log(toString(3));
console.log(toString(true));
console.log(toString(['a', 1]));
console.log(toString({ a: 1, b: 2 }));
console.log(toString(Infinity));
console.log(toString());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJpY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9nZW5lcmljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBc0RBLFNBQVMsUUFBUSxDQUFJLElBQU87SUFDMUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELFFBQVEsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNwQixLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUksQ0FBQztRQUNkLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLFFBQVEsQ0FBQztRQUNkLEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxVQUFVO1lBQ2IsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCO1lBQ0UsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztBQUNILENBQUM7QUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLy8gR0VORVJJQ1Ncbi8vIC8vIEdFTkVSSUNTXG4vLyAvLyBHZW5lcmljcyAtINC+0LHQvtCx0YnRkdC90L3Ri9C5INGC0LjQvywg0L/QvtC30LLQvtC70Y/RjtGJ0LjQuSDRgNC10LfQtdGA0LLQuNGA0L7QstCw0YLRjCDQvNC10YHRgtC+INC00LvRjyDRgtC40L/QsCxcbi8vIC8vINC60L7RgtC+0YDRi9C5INCx0YPQtNC10YIg0L/RgNC4INCy0YvQt9C+0LLQtSDQt9Cw0LzQtdC90ZHQvSDQvdCwINC+0L/RgNC10LTQtdC70ZHQvdC90YvQuS5cbi8vXG4vLyAvLyBFTUJFRERFRCBHRU5FUklDU1xuLy9cbi8vIGNvbnN0IG51bXM6IEFycmF5PG51bWJlcj4gPSBbMSwgMiwgM107XG4vL1xuLy8gYXN5bmMgZnVuY3Rpb24gdGVzdCgpIHtcbi8vICAgY29uc3QgYSA9IGF3YWl0IG5ldyBQcm9taXNlPG51bWJlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuLy8gICAgIHJlc29sdmUoMSk7XG4vLyAgIH0pO1xuLy8gfVxuLy9cbi8vIGNvbnN0IGNoZWNrOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHtcbi8vICAgZHJpdmU6IHRydWUsXG4vLyAgIGtwcDogZmFsc2Vcbi8vIH07XG4vL1xuLy8gLy8gR0VORVJJQ1MgSU4gRlVOQ1RJT05TXG4vLyAvLyBHZW5lcmljcyDQsiDRhNGD0L3QutGG0LjQuCDQv9GA0LjQvdGP0YLQviDQvdCw0LfRi9Cy0LDRgtGMINC70LjQsdC+INC+0LTQvdC+0Lkg0LHQvtC70YzRiNC+0Lkg0LHRg9C60LLQvtC5LFxuLy8gLy8g0LvQuNCx0L4g0L3QsNC30LLQsNC90LjQtdC8INGBINC60LDQutC+0Lkt0LvQuNCx0L4g0YHQvNGL0YHQu9C+0LLQvtC5INC90LDQs9GA0YPQt9C60L7QuS5cbi8vIGZ1bmN0aW9uIGxvZ01pZGRsZXdhcmU8VD4oZGF0YTogVCk6IFQge1xuLy8gICBjb25zb2xlLmxvZyhkYXRhKTtcbi8vICAgcmV0dXJuIGRhdGE7XG4vLyB9XG4vL1xuLy8gY29uc3QgcmVzMSA9IGxvZ01pZGRsZXdhcmU8bnVtYmVyPigxMCk7XG4vLyBjb25zdCByZXMyID0gbG9nTWlkZGxld2FyZTxzdHJpbmc+KCdhc2RmJyk7XG4vL1xuLy8gZnVuY3Rpb24gZ2V0U3BsaXR0ZWRIYWxmPFQ+KGRhdGE6IEFycmF5PFQ+KTogQXJyYXk8VD4ge1xuLy8gICBjb25zdCBsID0gZGF0YS5sZW5ndGggLyAyO1xuLy8gICByZXR1cm4gZGF0YS5zcGxpY2UoMCwgbCk7XG4vLyB9XG4vL1xuLy8gZ2V0U3BsaXR0ZWRIYWxmPG51bWJlcj4oWzEsIDMsIDRdKTtcbi8vXG4vLyAvLyBFWEVSQ0lTRSA3OiBDUkVBVEUgRlVOQ1RJT04gdG9TdHJpbmcoKVxuLy8g0J3QsNC/0LjRgdCw0YLRjCDRhNGD0L3QutGG0LjRjiB0b1N0cmluZywg0LrQvtGC0L7RgNCw0Y8g0L/RgNC40L3QuNC80LDQtdGCINC70Y7QsdC+0Lkg0YLQuNC/XG4vLyDQuCDQstC+0LfQstGA0LDRidCw0LXRgiDQtdCz0L4g0YHRgtGA0L7QutC+0LLQvtC1INC/0YDQtdC00YHRgtCw0LLQu9C10L3QuNC1LiDQldGB0LvQuCDQvdC1INC80L7QttC10YIsXG4vLyDRgtC+INCy0L7Qt9Cy0YDQsNGJ0LDQtdGCIHVuZGVmaW5lZC5cbi8vXG4vLyAvLyBNeSB3YXk6XG4vLyBmdW5jdGlvbiB0b1N0cmluZzxUPihkYXRhOiBUKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbi8vICAgY29uc3Qgc3RyID0gU3RyaW5nKGRhdGEpO1xuLy8gICBjb25zb2xlLmxvZyhzdHIpO1xuLy8gICByZXR1cm4gc3RyO1xuLy8gfVxuLy8gdG9TdHJpbmc8bnVtYmVyPigxMCk7XG4vLyB0b1N0cmluZzxib29sZWFuPih0cnVlKTtcbi8vIHRvU3RyaW5nPHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbi8vIHRvU3RyaW5nPEFycmF5PG51bWJlcj4+KFsxMCwgMjAsIDMwXSk7XG4vL1xuZnVuY3Rpb24gdG9TdHJpbmc8VD4oZGF0YTogVCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGRhdGEpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5jb25zb2xlLmxvZyh0b1N0cmluZygzKSk7XG5jb25zb2xlLmxvZyh0b1N0cmluZyh0cnVlKSk7XG5jb25zb2xlLmxvZyh0b1N0cmluZyhbJ2EnLCAxXSkpO1xuY29uc29sZS5sb2codG9TdHJpbmcoeyBhOiAxLCBiOiAyIH0pKTtcbmNvbnNvbGUubG9nKHRvU3RyaW5nKEluZmluaXR5KSk7XG5jb25zb2xlLmxvZyh0b1N0cmluZygpKTtcbiJdfQ==